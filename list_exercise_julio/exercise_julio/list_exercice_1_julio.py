# -*- coding: utf-8 -*-
"""list_exercice_1_julio.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KdoOcEN6SJnnYzNF2rgXX0faKX3pIVsZ
"""

# 34. Ler uma matriz D 5 x 5 (considere que não serão informados valores duplicados). A
# seguir ler um número X e escreva uma mensagem indicando se o valor de X existe ou
# NÃO na matriz.
import numpy as np

d = np.array([[1, 2, 3, 4, 5],
              [6, 7, 8, 9, 10],
              [11, 12, 13, 14, 15],
              [16, 17, 18, 19, 20],
              [ 21, 22, 23, 24, 25]])
# Encontrar os valores únicos e suas contagens
valores, contagens = np.unique(d, return_counts=True)

# Filtrar os valores que aparecem mais de uma vez
repetidos = valores[contagens > 1]

if len(repetidos) > 0:
    print("Valores repetidos:", repetidos)
else:
    print("Não há valores repetidos na matriz.")
valor_indicado = int(input("Digite um valor para varificar se existe ou não na matriz"))
for l in range(d.shape[0]):
    for c in range(d.shape[1]):
        if d[l, c] == valor_indicado:
            print(f"O valor {valor_indicado} existe na matriz")
            break  # Sai do loop de colunas
    if d[l, c] == valor_indicado:  # Se já encontrou o valor, sai do loop de linhas também
        break
else:
    print(f'O número {valor_indicado} NÃO existe na matriz')

# 35. Ler uma matriz G 5 x 5 e criar 2 vetores SL e SC de 5 elementos que contenham
# respectivamente as somas das linhas e das colunas de G. Escrever os vetores criados.
import numpy as np

g = np.array([[1, 2, 3, 4, 5],
              [6, 7, 8, 9, 10],
              [11, 12, 13, 14, 15],
              [16, 17, 18, 19, 20],
              [ 21, 22, 23, 24, 25]])
# Calculando a soma das linhas
SL = np.sum(g, axis=1)

# Calculando a soma das colunas
SC = np.sum(g, axis=0)

# Exibindo os resultados
print("Soma das linhas:", SL)
print("Soma das colunas:", SC)

# 36. Ler uma matriz A 12 x 13 e divida todos os 13 elementos de cada uma das 12 linhas de
# A pelo valor do maior elemento daquela linha. Escrever a matriz A modificada.


# Criar a matriz A 12x13 com números de ponto flutuante
A = np.arange(12 * 13).reshape(12, 13).astype(float)

# Encontrar o maior valor de cada linha
maior_valor_linha = np.max(A, axis=1)

# Criar uma nova matriz A_N para armazenar os valores modificados
A_N = A.copy()

for linha in range(A.shape[0]):
    A_N[linha] = A[linha] / maior_valor_linha[linha]
np.set_printoptions(precision=2, suppress=True)

print("Matriz original:")
print(A)
print("\nMaiores valores de cada linha:")
print(maior_valor_linha)
print("\nNova matriz A_N (modificada):")
print(A_N)

# 37. Ler um vetor G de 13 elementos que contenha o gabarito da loteria esportiva
# codificado da seguinte forma: 1-coluna um, 2-coluna do meio, 3-coluna dois.
# 38. Logo após, ler uma matriz 13 x 3 que contenha a aposta de um jogador. Considere que
# cada posição da matriz armazenará o valor 1 se for apostado, 0 caso contrário. Calcular

# e escrever o número de pontos obtidos pelo jogador. Escrever também o número de
# apostas simples, dupla ou tripla utilizadas pelo apostador.

import numpy as np
gabarito = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1]
apostas = np.array([
    [1, 0, 0],
    [0, 1, 0],
    [0, 0, 1],
    [1, 0, 0],
    [0, 1, 0],
    [1, 0, 0],
    [1, 1, 0],
    [0, 0, 1],
    [1, 1, 0],
    [0, 1, 0],
    [1, 1, 1],
    [1, 1, 1],
    [0, 1, 1],
])
pontos = 0
simples = 0
duplas = 0
triplas = 0
apostas.shape

for l in range(apostas.shape[0]):
    aposta = apostas[l]
    acertos = 0  # Contar quantos acertos o jogador fez nesta rodada

    for c in range(apostas.shape[1]):
      if aposta[c] == 1 and gabarito[l] == c + 1:
             acertos += 1


    pontos += acertos

    if sum(aposta) == 1:
        simples += 1
    elif sum(aposta) == 2:
        duplas += 1
    elif sum(aposta) == 3:
        triplas += 1

print(f"Pontos do jogador: {pontos}")
print(f"Apostas simples: {simples}")
print(f"Apostas duplas: {duplas}")
print(f"Apostas triplas: {triplas}")

# 39. Crie uma rotina de calculadora, onde receba dois valores e indique e receba qual
# operação básica deseja calcular, em seguida apresente o resultado. Todo o cálculo
# deve ser feito com uso de funções.
def apresenta_menu():
  print('Escolha um das operações abaixo:')
  print('(1) - SOMA')
  print('(2) - SUBTRAÇÃO')
  print('(3) - DIVISÃO')
  print('(4) - MULTIPLICAÇÃO')
  print("S - Sair")


def divisao(num1,num2):
  divisao = 0
  divisao = num1/num2
  return print(f'O resualtado da DIVISÃO é {divisao}')

def mutiplicacao(num1,num2):
  multiplicacao = num1*num2
  return print(f'O resualtado da MULTIPLICAÇÃO é {multiplicacao}')

def subtracao(num1,num2):
  subtracao = num1 - num2
  return print(f'O resualtado da SUBTRAÇÃO é {subtracao}')

def soma(num1,num2):
   soma = num1 + num2
   return print(f'O resualtado da SOMA é {soma}')


while True:
  apresenta_menu()
  opcao = input("Escolha uma operação: ")
  if opcao.upper() != "S":
    number1 = float(input("Digite o primeiro valor para operação:"))
    number2 = float(input("Digite o segundo valor para operação:"))

    if opcao == '1':
      soma(number1,number2)
    elif opcao == '2':
      subtracao(number1,number2)
    elif opcao == '3':
      divisao(number1,number2)
    elif opcao == '4':
      mutiplicacao(number1,number2)
    else:
      print("Opção inválida")

  elif opcao.upper() == "S":
    print("Saindo da Calculadora")
    break

# divisao(5,2)
# mutiplicacao(5,2)
# subtracao(5,2)
# soma(1,2)

# 40. Refaça a lógica anterior, porém para a multiplicação deve ser feita utilizando seguidas
# somas.
#mulplcação atraves de soma
def multiplicacao_por_soma(num1,num2):
  soma = 0
  for i in range(num2):
    soma += num1
  print(f'Esse é o resultado da multiplicaçao {soma}')

while True:
  apresenta_menu()
  opcao = input("Escolha uma operação: ")
  if opcao.upper() != "S":
    number1 = int(input("Digite o primeiro valor para operação:"))
    number2 = int(input("Digite o segundo valor para operação:"))

    if opcao == '1':
      soma(number1,number2)
    elif opcao == '2':
      subtracao(number1,number2)
    elif opcao == '3':
      divisao(number1,number2)
    elif opcao == '4':
      multiplicacao_por_soma(number1,number2)
    else:
      print("Opção inválida")

  elif opcao.upper() == "S":
    print("Saindo da Calculadora")
    break

# 41. Defina uma função chamada velocidade_media() em um script que recebe dois
# parâmetros: a distância percorrida (em metros) e o tempo (em segundos) gasto.
# Utilizando a lógica anterior modifique a função velocidade_media() utilizando uma
# função divisao() para calcular a velocidade. A função divisao() recebe dois números
# como parâmetros, calcula e retorna o resultado da divisão do primeiro pelo segundo.

def velocidade_media(distancia,tempo):
  divisao(distancia,tempo)

def menu_calcular_velocidade():
  print('VAMOS CALCULAR A VELOCIDADE MÉDIA')
  distancia_m = float(input("Digite a distância em METROS: "))
  tempo_s =float(input('Digite o tempo em SEGUNDOS: '))
  velocidade_media(distancia_m,tempo_s)
menu_calcular_velocidade()

# 43. Organiza número. Faça uma rotina que organize os números recebidos em: crescente,
# decrescente e reverso.
# Por exemplo:
# recebido: 293
#  crescente: 239
#  decrescente: 932
#  reverso: 392
valor_recebido = input("Digite um valor:")
recebido_list = list(valor_recebido)
def lista_crescente(lista):
  lista_crescente = sorted(lista)
  print(f'ESTÁ É A LISTA EM ORDEM CRESCENTE:\n{lista_crescente}')

def lista_decrecente(lista):
  lista_decrecente = sorted(lista, reverse=True)
  print(f"ESSA É A LISTA EM ORDEM DECRESETE>:\n{lista_decrecente}")

def lista_reverso():
  recebido_list.reverse()
  print(f'Essa é a lista em revesro\n{recebido_list}')

lista_crescente(recebido_list)
lista_decrecente(recebido_list)
lista_reverso()

# 44.Faça um programa que converta da notação de 24 horas para a notação de 12 horas.
# Por exemplo, o programa deve converter 14:25 em 2:25 P.M. A entrada é dada em
# dois inteiros. Deve haver pelo menos duas funções: uma para fazer a conversão e uma
# para a saída. Registre a informação A.M./P.M. como um valor ‘A’ para A.M. e ‘P’ para
# P.M. Assim, a função para efetuar as conversões terá um parâmetro formal para
# registrar se é A.M. ou P.M. Inclua um loop que permita que o usuário repita esse
# cálculo para novos valores de entrada todas as vezes que desejar.

def converter_para_12(hora,minuto):
  if hora >= 12:
    periodo = 'P.M'
    if hora > 12:
      hora -=12
  else:
    periodo='A.M'
    if hora == 0:
      hora=12
  return hora,minuto,periodo

def mostrar_resultado(hora,minuto,perido):
  print(f'{hora}:{minuto} {perido}.')

while True:
  hora = int(input('Digite a hora (em 24h): '))
  minuto = int(input('Digite os minutos: '))

  #estou criando varias variaveis em uma mesma linha e associando ao return da minha def
  hora_convertida,minuto_convertido,periodo = converter_para_12(hora,minuto)
  mostrar_resultado(hora_convertida,minuto_convertido,periodo)

  repetir = input("Você quer converter outro horário? (s/n): ").lower()
  if repetir != 's':
    break

# 45. Data com mês por extenso. Construa uma função que receba uma data no formato
# DD/MM/AAAA e devolva uma string no formato D de mesPorExtenso de AAAA.
# Opcionalmente, valide a data e retorne NULL caso a data seja inválida.

def receba_data():
  dd = int(input("Digite um dia do mês: "))
  mm = int(input("Digite um mês: "))
  aaaa= int(input("Digite um ano: "))

def data_por_extenso(dd,mm,aaaa):
  meses = ['Janeiro','Fevereiro','Março','Abril','Maio','Junho','Julho','Agosto','Setembro','Outubro','Novembro', 'Dezembro']
  cont = 1
  for mes in meses:
    if mm == cont:
      print('DATA POR EXTENSO')
      print(f'{dd} de {mes} de {aaaa}')
      break
    else:
      cont += 1
while True:
    dd = int(input("Digite um dia do mês: "))
    mm = int(input("Digite um mês: "))
    aaaa= int(input("Digite um ano: "))

    data_por_extenso(dd,mm,aaaa)
    repetir = input("Você quer escrever outra data? (s/n): ").lower()
    if repetir != 's':
      break